plugins {
    id 'java'
    id 'eclipse'
}

ext {
  tp_number = '03'
  dbHost = '192.168.46.101'
  dbPort = '3306'
  dbSid = 'petstoreDB'
  dbDriver = 'com.mysql.cj.jdbc.Driver'
  dbUrl = "jdbc:mysql://${dbHost}:${dbPort}/${dbSid}?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true"
  dbUser = 'root'
  dbPassword = 'root'
  coreProjectBuildDir = project(':core').buildDir // "core/build"
}

repositories {
	mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.12'
    runtime 'mysql:mysql-connector-java:8.0.11'
}

task zip_src {
  ant.zip(destfile: "TP${tp_number}src.zip") {
    fileset(dir: '.') {
      includesfile(name: 'missingFiles.txt')
    }
  }
}

clean.doLast {
      // delete also files generated by mark task
      file("${rootDir}/TP${tp_number}.test").delete()
      file("${rootDir}/TP${tp_number}.html").delete()
      file("${rootDir}/TP${tp_number}src.zip").delete()
}


task create_db {
  group = 'build'
  description = 'Builds the database schema.'
}
create_db.doLast {
  runSQLScript('./core/src/config/structure.sql')
}
task insert_data {
  group = 'build'
  description = 'Inserts the database data.'
}
insert_data.doLast {
  runSQLScript('./core/src/config/data.sql')
}
def runSQLScript(scriptName) {
    ant.sql(driver: dbDriver,
            url: dbUrl,
            userid: dbUser,
            password: dbPassword,
            encoding: 'UTF-8',
            classpath: configurations.runtime.asPath) {
        fileset(file: scriptName)
    }
}

task mark(type: JavaExec){
  group = 'verification'
  description = 'Runs other unit tests and Generates TP result.'
  dependsOn ':core:compileJava'
  dependsOn zip_src
  dependsOn create_db, insert_data
  main = "Tests"
  systemProperty "fichierScenario", "TP${tp_number}.test"
  classpath files([ "${coreProjectBuildDir}/classes/java/main", "install/test${tp_number}.jar" ]) // yaps classes and obfuscated tests
  classpath sourceSets.test.runtimeClasspath // to find JUnit jar
  classpath configurations.runtime // for mysql 
}

task myTest(type: JavaExec){
  dependsOn ':core:compileJava', ':core:compileTestJava'
  dependsOn create_db, insert_data
  group = 'verification'
  description = 'Runs the unit tests in text mode.'
  main = "AllTests"
  classpath files([ "${coreProjectBuildDir}/classes/java/main",  "${coreProjectBuildDir}/classes/java/test" ]) // yaps classes
  classpath sourceSets.test.runtimeClasspath // to find JUnit jar
  classpath sourceSets.main.runtimeClasspath // to find mysql
}

task deploy() {
  group = 'distribution'
  description = 'Install the project as a distribution.'
  dependsOn ':clientCatalog:installDist', ':clientCustomer:installDist'
}
